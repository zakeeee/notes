vnote_backup_file_826537664 D:/notes/网络/HTTP.md
# HTTP

要点：

- 在浏览器中输入URL到显示的过程
- Cookie和Session
- 请求报文和响应报文
- HTTP请求方法
- HTTP状态码
- HTTPS

## 在浏览器中输入URL到显示的过程

![](_v_images/20190723220402012_24054.png)

总体来说分为以下几个过程：
1. DNS解析
2. TCP连接发送
3. HTTP请求
4. 服务器处理请求并返回HTTP报文
5. 浏览器解析渲染页面
6. 连接结束

具体可以参考这篇文章：https://segmentfault.com/a/1190000006879700

## Cookie和Session

Cookie 和 Session都是用来跟踪浏览器用户身份的会话方式，但是两者的应用场景不太一样。

Cookie 一般用来保存用户信息，比如

- 我们在 Cookie 中保存已经登录过得用户信息，下次访问网站的时候页面可以自动帮你登录的一些基本信息给填了。
- 一般的网站都会有保持登录也就是说下次你再访问网站的时候就不需要重新登录了，这是因为用户登录的时候我们可以存放了一个 Token 在 Cookie 中，下次登录的时候只需要根据 Token 值来查找用户即可(为了安全考虑，重新登录一般要将 Token 重写)。
- 登录一次网站后访问网站其他页面不需要重新登录。

Session 的主要作用就是通过服务端记录用户的状态。 典型的场景是购物车，当你要添加商品到购物车的时候，系统不知道是哪个用户操作的，因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的 Session 之后就可以标识这个用户并且跟踪这个用户了。
Cookie 数据保存在客户端(浏览器端)，Session 数据保存在服务器端。
Cookie 存储在客户端中，而Session存储在服务器上，相对来说 Session 安全性更高。如果使用 Cookie 的一些敏感信息不要写入 Cookie 中，最好能将 Cookie 信息加密然后使用到的时候再去服务器端解密。

## 请求报文和响应报文

请求报文

![](_v_images/20190723220452735_15706.png)

响应报文

![](_v_images/20190723220459238_9349.png)

## HTTP请求方法

|  方法名  |                                    说明                                     |
| ------- | --------------------------------------------------------------------------- |
| GET     | 请求指定的页面信息，并返回实体主体。                                           |
| HEAD    | 类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头。                |
| POST    | 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。 |
| PUT     | 从客户端向服务器传送的数据取代指定的文档的内容                                  |
| DELETE  | 请求服务器删除指定的数据。                                                    |
| CONNECT | HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。                       |
| OPTIONS | 允许客户端查看服务器的性能。                                                  |
| TRACE   | 回显服务器收到的请求，主要用于测试或诊断。                                     |
| PATCH   | 是对 PUT 方法的补充，用来对已知资源进行局部更新 。                              |

## HTTP状态码

| 状态码 |              类别               |              含义               |
| ----- | ------------------------------ | ------------------------------ |
| 1xx   | Informational（信息性状态码）    | 接收的请求正在处理               |
| 2xx   | Success（成功状态码             | 请求正常处理完毕                 |
| 3xx   | Redirection（重定向状态码）      | 需要进行附加操作以完成请求        |
| 4xx   | Client Error（客户端错误状态码） | 服务器无法处理请求               |
| 5xx   | Server Error（服务器错误状态码） | Server Error（服务器错误状态码） |

## HTTPS

SSL连接过程

使用非对称加密传输后面传输数据用的加密密钥，使用对称加密进行数据加密和传输。


